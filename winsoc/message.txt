#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>

// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
// #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "80"

int main ()
{
    WSADATA wsaData;
    int iResult;

    SOCKET ListenSocket = INVALID_SOCKET;

    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;

    struct addrinfo hints;

    int iSendResult = 0;
    char recvbuf[DEFAULT_BUFLEN];

    int recvbuflen = DEFAULT_BUFLEN;
    char *sendvbuf = "HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8
Content-Length: 125
Accept-Ranges: bytes
Connection: close

";
    while(1){
    // Initialize Winsock
    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);
    if (iResult != 0) {
        printf("WSAStartup failed with error: %d
", iResult);
        return 1;
    }

    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

    // Resolve the server address and port
    iResult = getaddrinfo(NULL, DEFAULT_PORT, &hints, &result);
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d
", iResult);
        WSACleanup();
        return 1;
    }

    // Create a SOCKET for connecting to server/n    ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld
", WSAGetLastError());
        freeaddrinfo(result);
        WSACleanup();
        return 1;
    }

    // Setup the TCP listening socket
    iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d
", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);

    iResult = listen(ListenSocket, SOMAXCONN);
    if (iResult == SOCKET_ERROR) {/n        printf("listen failed with error: %d
", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    // Accept a client socket
    ClientSocket = accept(ListenSocket, NULL, NULL);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d
", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    // No longer need server socket
    closesocket(ListenSocket);

    // Receive until the peer shuts down the connection
    int counter = 0;
    do {
        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
                counter++;
                for (int ctr = 0; ctr < iResult; ctr++){
                        std::cout << recvbuf[ctr];
                }
        recvbuf[iResult] = ' ';
        recvbuf[iResult+1] = 'G';
        recvbuf[iResult+2] = 'E';

                    printf("Bytes received: %d
", iResult);
        // Echo the buffer back to the sender
            //iSendResult = send( ClientSocket, recvbuf, iResult+3, 0 );
        //send google to temp app for school
                //while(iSendResult <= 0)
                iSendResult = send( ClientSocket, sendvbuf, 121, 0 );
                iSendResult = 0;
                //while(iSendResult <= 0)
                iSendResult = send( ClientSocket, "<h1>Hello, World</h1>

", 24, 0);
                //iSendResult = send( ClientSocket, "POST /index.html HTTP/1.1", 83+30, 0);
            if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d
", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d
", iSendResult);
        }
        else if (iResult == 0)
            printf("Connection closing...
");

   else  {
            printf("recv failed with error: %d
", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult );

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d
", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();
        return 1;
    }
}
    // cleanup
    closesocket(ClientSocket);
    WSACleanup();
    return 0;
}